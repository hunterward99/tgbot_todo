import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import ButtonService from './systems/buttons/button.service';
import { userRepository } from './data/repository/user.repository';
import { Sequelize } from 'sequelize-typescript';
import { UserEntity } from './shared/entities/user/user.entity';
import { TaskEntity } from './shared/entities/task/task.entity';
import { taskRepository } from './data/repository/task.repository';

type IConnectionConfig = {
  username: string;
  password: string;
  database: string;
  host: string;
  port: string;
};

@Injectable()
export class AppService {
  public sequelize!: Sequelize;

  private readonly config: IConnectionConfig = {
    username: process.env.POSTGRES_USER!,
    password: process.env.POSTGRES_PASSWORD!,
    database: process.env.POSTGRES_DB!,
    host: process.env.POSTGRES_HOST!,
    port: process.env.POSTGRES_PORT!,
  };

  constructor(
    private readonly buttonService: ButtonService,
    private readonly userRepository: userRepository,
    private readonly taskRepository: taskRepository,
  ) {
    this.initDB();
  }

  async getHello(ctx: Context) {
    await this.userRepository.findUser(ctx);

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç! ‚úã \n\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è`,
      this.buttonService.showStartButtons(),
    );
  }

  async initDB() {
    const url = `postgresql://${this.config.username}:${this.config.password}@${this.config.host}:${this.config.port}/${this.config.database}`;
    this.sequelize = new Sequelize(url, {
      dialect: 'postgres',
      models: [UserEntity, TaskEntity],
      dialectModule: require('pg'),
      logging: false,
    });

    await this.sequelize.authenticate();
    await this.sequelize.sync({ alter: true });

    try {
      console.log(
        '\n\n[DB] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! \n–í—Å–µ –º–æ–¥–µ–ª–∏ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–æ–≤–∞–Ω—ã —Å –ë–î —É—Å–ø–µ—à–Ω–æ!\n',
      );

      this.userRepository.initUsers();
      this.taskRepository.initTasks();
    } catch (error) {
      console.error(
        '[DatabaseService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω–∞ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ',
        error?.message,
      );
    }
  }

  public async showUserTask(ctx: Context) {
    const user = await this.userRepository.findUser(ctx);
    if (!user)
      return ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

    const userTasks = await this.taskRepository.getAllbyUserId(
      user.dataValues.id,
    );
    if (userTasks.length === 0) return ctx.reply(`–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);

    ctx.reply(`–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:`);

    userTasks.forEach((e) => {
      ctx.reply(`–ó–∞–¥–∞—á–∞: ${e.name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${e.description}`);
    });
  }

  async createTaskStep1(ctx: Context) {
    const user = await this.userRepository.findUser(ctx);
    if (!user)
      return ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

    await ctx.reply(`–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`);

    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.status = `waitingInputNameTask`;
  }

  async createTaskStep2(ctx: Context) {
    await ctx.reply(`–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`);

    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.status = `waitingInputDescrTask`;
  }

  async showAllTasks() {}

  async handleTextMessage(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏—è –∏ —Å—Ç–∞—Ç—É—Å
    if (!ctx.session || !ctx.session.status) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º');
    }

    const text = ctx.text;
    if (!text) return;

    const user = await this.userRepository.findUser(ctx);
    if (!user) {
      return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    switch (ctx.session.status) {
      case 'waitingInputNameTask':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.taskName = text;
        await this.createTaskStep2(ctx);
        break;

      case 'waitingInputDescrTask':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        ctx.session.taskDescription = text;
        await this.createTask(ctx);
        break;

      default:
        ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º');
    }
  }

  async createTask(ctx: Context) {
    if (!ctx.session || !ctx.session.taskName || !ctx.session.taskDescription) {
      return ctx.reply('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }

    const user = await this.userRepository.findUser(ctx);
    if (!user) {
      return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    try {
      await this.taskRepository.create(
        user.dataValues.id.toString(),
        ctx.session.taskName,
        ctx.session.taskDescription,
      );

      await ctx.reply(
        `‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.session.taskName}\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.taskDescription}`,
        this.buttonService.showStartButtons(),
      );

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.status;
      delete ctx.session.taskName;
      delete ctx.session.taskDescription;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      delete ctx.session.status;
      delete ctx.session.taskName;
      delete ctx.session.taskDescription;
    }
  }
}
